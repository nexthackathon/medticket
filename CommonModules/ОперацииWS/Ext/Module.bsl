
Функция ОбработатьОперацию(ИмяОперации, Параметры) Экспорт
	
	ЧтениеXML = Новый ЧтениеXML;
	ЧтениеXML.УстановитьСтроку(Параметры);
	СтруктураПараметров = СериализаторXDTO.ПрочитатьXML(ЧтениеXML);
	ЧтениеXML.Закрыть();
	
	Если ИмяОперации = "Логин" Тогда
		                                   
		Результат = ВыполнитьОперациюВход(СтруктураПараметров);
		
	Иначе
		
		//Неизвестная операция
		Результат = НеизвестнаяОперация();
		
	КонецЕсли; 
	
	ЗаписьXML = Новый ЗаписьXML;
	ЗаписьXML.УстановитьСтроку();
	СериализаторXDTO.ЗаписатьXML(ЗаписьXML, Результат, НазначениеТипаXML.Явное);
	
	Возврат ЗаписьXML.Закрыть();
	
КонецФункции // ОбработатьОперацию()

Функция ПодготовитьДанныеДляВводаОперации(ИмяОперации) Экспорт
	
	//Если ИмяОперации = "ПередачаЖивотногоНаУбой" Тогда
	//	                                   
	//	Результат = ПодготовитьДанныеДляОперацииПоПередачеЖивотногоНаУбой();
	//	
	//ИначеЕсли ИмяОперации = "ПередачаТушиВХолодильнуюКамеру" Тогда
	//	                                   
	//	Результат = ПодготовитьДанныеДляОперацииПередачиТушиВХолодильнуюКамеру();
	//	
	//ИначеЕсли ИмяОперации = "ПередачаОтрубовНаСклад"
	//	ИЛИ ИмяОперации = "ПередачаОтрубовВПереработку" Тогда
	//	                                   
	//	Результат = ПодготовитьДанныеДляОперацииПередачиОтрубов(ИмяОперации);
	//	
	//ИначеЕсли ИмяОперации = "ПередачаТушиНаОбвалку" Тогда
	//	                                   
	//	Результат = ПодготовитьДанныеДляОперацииПередачиТушиНаОбвалку();
	//	
	//ИначеЕсли ИмяОперации = "ПередачаТушНаРеализацию" Тогда
	//	                                   
	//	Результат = ПодготовитьДанныеДляОперацииПередачиТушНаРализацию();
	//	
	//ИначеЕсли ИмяОперации = "ПередачаСырьяОбвалки"
	//	ИЛИ ИмяОперации = "ВыпускОтрубовБезСерий" Тогда
	//	                                   
	//	Результат = ПодготовитьДанныеДляОперацийОбвалки();
	//	
	//ИначеЕсли ИмяОперации = "ПередачаВЗаморозку"
	//	ИЛИ ИмяОперации = "ПередачаИзЗаморозки" Тогда
	//	                                   
	//	Результат = ПодготовитьДанныеДляЗаморозки(ИмяОперации);
	//	
	//ИначеЕсли ИмяОперации = "Инвентаризация" Тогда
	//	                                   
	//	Результат = ПодготовитьДанныеДляОперацииИнвентаризация();
	//	
	//ИначеЕсли ИмяОперации = "СихронизацияНоменклатуры" Тогда
	//	                                   
	//	Результат = ПодготовитьДанныеДляОперацииСихронизацияНоменклатуры();
	//	
	//Иначе
	//	
	//	//Неизвестная операция
	//	Результат = НеизвестнаяОперация();
	//	
	//КонецЕсли; 

	//ЗаписьXML = Новый ЗаписьXML;
	//ЗаписьXML.УстановитьСтроку();
	//СериализаторXDTO.ЗаписатьXML(ЗаписьXML, Результат, НазначениеТипаXML.Явное);
	//
	//Возврат ЗаписьXML.Закрыть();
	
КонецФункции // ПодготовитьДанныеДляВводаОперации()

/////////////////////////////////////
// Создание документов операций

Функция ВыполнитьОперациюВход(ПараметрыВызова)
	
	//СтруктураВозврата = Новый Структура("ОписаниеДанных, ЕстьОшибки, ОписаниеОшибки", "", Ложь, "");
	//ШтрихКод = ОбработатьШтрихКод(ПараметрыВызова.ШтрихКод);
	//Вес = ПараметрыВызова.Вес;
	//
	//Если НЕ ЗначениеЗаполнено(ШтрихКод) Тогда
	//	
	//	СтруктураВозврата.ЕстьОшибки = Истина;
	//	СтруктураВозврата.ОписаниеОшибки = "Не заполнен штрих-код";
	//	
	//КонецЕсли; 
	//
	//Если НЕ ЗначениеЗаполнено(Вес) Тогда
	//	
	//	СтруктураВозврата.ЕстьОшибки = Истина;
	//	СтруктураВозврата.ОписаниеОшибки = СтруктураВозврата.ОписаниеОшибки + ?(НЕ ПустаяСтрока(СтруктураВозврата.ОписаниеОшибки), Символы.ПС, "");
	//	СтруктураВозврата.ОписаниеОшибки = "Не заполнен вес";
	//	
	//КонецЕсли; 
	//
	//Если СтрДлина(ШтрихКод) <> ДопустимаяДлинаШтрихКода() Тогда
	//	
	//	СтруктураВозврата.ЕстьОшибки = Истина;
	//	СтруктураВозврата.ОписаниеОшибки = СтруктураВозврата.ОписаниеОшибки + ?(НЕ ПустаяСтрока(СтруктураВозврата.ОписаниеОшибки), Символы.ПС, "");
	//	СтруктураВозврата.ОписаниеОшибки = "Ошибочный штрихкод";
	//	
	//КонецЕсли; 
	//
	//Если НЕ СтруктураВозврата.ЕстьОшибки Тогда
	//	
	//	ДанныеШтрихКода = РазобратьШтрихКод(ШтрихКод);
	//	
	//	Запрос = Новый Запрос(ТекстЗапросаПоискаСерииДокументаПоступленияПоСерии());
	//	Запрос.УстановитьПараметр("НаименованиеСерии", ДанныеШтрихКода.Серия);
	//	Запрос.УстановитьПараметр("Дата", ТекущаяДата());
	//	Результат = Запрос.ВыполнитьПакет();
	//	
	//	Выборка = Результат[0].Выбрать();
	//	ТаблицаДокументов = Результат[1].Выгрузить();
	//	
	//	Если Выборка.Следующий() Тогда
	//		
	//		Если ЗначениеЗаполнено(Выборка.ДокументПоступления) Тогда
	//			СтруктураВозврата.ЕстьОшибки = Истина;
	//			СтруктураВозврата.ОписаниеОшибки = СтруктураВозврата.ОписаниеОшибки + ?(НЕ ПустаяСтрока(СтруктураВозврата.ОписаниеОшибки), Символы.ПС, "");
	//			СтруктураВозврата.ОписаниеОшибки = "Поступление животного ранее было уже зарегистрировано. Ввод данных отменен.";
	//		Иначе
	//			СтрокиДокумента = ТаблицаДокументов.НайтиСтроки(Новый Структура("Контрагент, Ферма", Выборка.Серия.Контрагент, Выборка.Серия.Ферма));
	//			Если СтрокиДокумента.Количество() > 0 Тогда
	//				ДокументПоступления = СтрокиДокумента[0].Ссылка.ПолучитьОбъект();
	//			Иначе
	//				ДокументПоступления = Документы.ПоступлениеЖивотных.СоздатьДокумент();
	//				ДокументПоступления.Заполнить(Выборка.Серия);
	//				ДокументПоступления.Дата = ТекущаяДата();
	//				
	//			КонецЕсли; 
	//			
	//			ДокументПоступления.Контрагент = Выборка.Серия.Контрагент;
	//			ДокументПоступления.Ферма = Выборка.Серия.Ферма; 
	//			СтрокаДокумента = ДокументПоступления.Состав.Добавить();
	//			СтрокаДокумента.Серия = Выборка.Серия;
	//			СтрокаДокумента.Вес = Вес; //ДанныеШтрихКода.Вес;
	//			ДокументПоступления.Записать(РежимЗаписиДокумента.Проведение);
	//			
	//		КонецЕсли; 
	//		
	//	Иначе
	//		СтруктураВозврата.ЕстьОшибки = Истина;
	//		СтруктураВозврата.ОписаниеОшибки = СтруктураВозврата.ОписаниеОшибки + ?(НЕ ПустаяСтрока(СтруктураВозврата.ОписаниеОшибки), Символы.ПС, "");
	//		СтруктураВозврата.ОписаниеОшибки = "Серия не найдена";
	//	КонецЕсли; 
	//	
	//КонецЕсли; 	
	//
	//Возврат СтруктураВозврата;
	
КонецФункции // СоздатьОперациюПриемаЖивотного()

Функция НеизвестнаяОперация()
	
	СтруктураВозврата = Новый Структура("ЕстьОшибки, ОписаниеОшибки", Истина, "Передана неизвестная операция");
	
	Возврат СтруктураВозврата;
	
КонецФункции // НеизвестнаяОперация()


/////////////////////////////////////
// Формирование данных для операций

Функция ПодготовитьДанныеДляОперацииПоПередачеЖивотногоНаУбой()

	СтруктураВозврата = Новый Структура("ОписаниеДанных, ЕстьОшибки, ОписаниеОшибки, Данные, ЗапрашиватьВес", 
		"", Ложь, "", Неопределено);
	
	//СтруктураВозврата.Вставить("Данные", Новый ХранилищеЗначения(ТаблицаЗабоя, Новый СжатиеДанных(9)));
	
	Возврат СтруктураВозврата;
	
КонецФункции // ()
 